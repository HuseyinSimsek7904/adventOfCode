macro malloc:ARRAY-SIZE 0x100000 endmacro
macro malloc:AVAIL-STACK-SIZE 0x100 endmacro

include "dynamic/malloc.corth"
include "dynamic/utils.corth"
include "linux_x86/stdio.corth"
include "collections/list64.corth"


proc check-if-safe
  ptr -> bool
in let list in
  list list64:length 1 <= if true return end

  0 list list64:get 1 list list64:get let first second in
    second first - abs 3 >
    second first = | if false return end

    second first >
  end

  memory ascending sizeof(bool) in
    ascending !bool

    1 while dup list list64:length < do let i in
      i dec list list64:get i list list64:get let left right in
        right left > let cmp in
          right left =
          right left - abs 3 > |
          cmp ascending @bool ^ | if false return end
        end
      end
    i end inc end drop
  end
end true end


proc main
  int int -> int
in let argc argv in
  malloc:init

  "data.txt" drop fopen-r let file in
    file isn-pos if
      "could not open file\n" eputs
      1 exit drop
    end

    memory safe      sizeof(int) and
           list      sizeof(ptr) and
           token     0x10        and
           length    sizeof(int) and
           buffer    1           in

      0 safe !64
      0 length !64

      list64:init list !64

      while true do
        buffer 1 file fgets is-zero if
          safe @64 putu putnl
          0 return
        end

        buffer @8 ' ' = if
          token length @64 length convd drop
          length @64 list list64:append
          0 length !64

        else buffer @8 '\n' = if
          token length @64 length convd drop
          length @64 list list64:append
          0 length !64

          list check-if-safe if safe @inc64 end

          0 list list64:length-addr !64

        else
          buffer @8 length @64 token array8:set
          length @inc64

        end end
      end
    end

    file fclose drop
  end
end 0 end
